generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                    @default(USER)
  hashedPassword        String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  favoriteIds           String[]                @db.ObjectId
  accounts              Account[]
  listings              Listing[]
  reservations          Reservation[]
  vehicles              Vehicle[]
  VehicleReservation    VehicleReservation[]
  Restaurant            Restaurant[]
  RestaurantReservation RestaurantReservation[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  hyperlink       String?
  phoneContact    String
  createdAt       DateTime      @default(now())
  category        String
  roomCount       Int
  bathroomCount   Int
  guestCount      Int
  detailedAddress String
  latlng          Float[]
  countryValue    String
  stateValue      String
  userId          String        @db.ObjectId
  price           Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations    Reservation[]
  images          Image[]
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  isPaid     Boolean  @default(false)
  phone      String   @default("")
  address    String   @default("")
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  hyperlink       String?
  phoneContact    String
  createdAt       DateTime             @default(now())
  category        String
  seatCount       Int
  detailedAddress String
  latlng          Float[]
  countryValue    String
  stateValue      String
  userId          String               @db.ObjectId
  price           Int
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations    VehicleReservation[]
  images          VehicleImage[]
}

model VehicleImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String   @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model VehicleReservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  vehicleId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  isPaid     Boolean  @default(false)
  phone      String   @default("")
  address    String   @default("")
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  hyperlink       String?
  phoneContact    String
  createdAt       DateTime                @default(now())
  category        String
  guestCount      Int
  detailedAddress String
  latlng          Float[]
  countryValue    String
  stateValue      String
  userId          String                  @db.ObjectId
  price           Int
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations    RestaurantReservation[]
  images          RestaurantImage[]
}

model RestaurantImage {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model RestaurantReservation {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  restaurantId String     @db.ObjectId
  startDate    DateTime
  endDate      DateTime
  totalPrice   Float
  isPaid       Boolean    @default(false)
  phone        String     @default("")
  address      String     @default("")
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}
